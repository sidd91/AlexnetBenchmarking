// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XEXECUTEFIRSTLAYER1_P2_H
#define XEXECUTEFIRSTLAYER1_P2_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xexecutefirstlayer1_p2_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Control_BaseAddress;
} XExecutefirstlayer1_p2_Config;
#endif

typedef struct {
    u32 Control_BaseAddress;
    u32 IsReady;
} XExecutefirstlayer1_p2;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XExecutefirstlayer1_p2_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XExecutefirstlayer1_p2_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XExecutefirstlayer1_p2_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XExecutefirstlayer1_p2_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XExecutefirstlayer1_p2_Initialize(XExecutefirstlayer1_p2 *InstancePtr, u16 DeviceId);
XExecutefirstlayer1_p2_Config* XExecutefirstlayer1_p2_LookupConfig(u16 DeviceId);
int XExecutefirstlayer1_p2_CfgInitialize(XExecutefirstlayer1_p2 *InstancePtr, XExecutefirstlayer1_p2_Config *ConfigPtr);
#else
int XExecutefirstlayer1_p2_Initialize(XExecutefirstlayer1_p2 *InstancePtr, const char* InstanceName);
int XExecutefirstlayer1_p2_Release(XExecutefirstlayer1_p2 *InstancePtr);
#endif

void XExecutefirstlayer1_p2_Start(XExecutefirstlayer1_p2 *InstancePtr);
u32 XExecutefirstlayer1_p2_IsDone(XExecutefirstlayer1_p2 *InstancePtr);
u32 XExecutefirstlayer1_p2_IsIdle(XExecutefirstlayer1_p2 *InstancePtr);
u32 XExecutefirstlayer1_p2_IsReady(XExecutefirstlayer1_p2 *InstancePtr);
void XExecutefirstlayer1_p2_EnableAutoRestart(XExecutefirstlayer1_p2 *InstancePtr);
void XExecutefirstlayer1_p2_DisableAutoRestart(XExecutefirstlayer1_p2 *InstancePtr);

void XExecutefirstlayer1_p2_Set_group_id_x(XExecutefirstlayer1_p2 *InstancePtr, u32 Data);
u32 XExecutefirstlayer1_p2_Get_group_id_x(XExecutefirstlayer1_p2 *InstancePtr);
void XExecutefirstlayer1_p2_Set_group_id_y(XExecutefirstlayer1_p2 *InstancePtr, u32 Data);
u32 XExecutefirstlayer1_p2_Get_group_id_y(XExecutefirstlayer1_p2 *InstancePtr);
void XExecutefirstlayer1_p2_Set_group_id_z(XExecutefirstlayer1_p2 *InstancePtr, u32 Data);
u32 XExecutefirstlayer1_p2_Get_group_id_z(XExecutefirstlayer1_p2 *InstancePtr);
void XExecutefirstlayer1_p2_Set_bias(XExecutefirstlayer1_p2 *InstancePtr, u32 Data);
u32 XExecutefirstlayer1_p2_Get_bias(XExecutefirstlayer1_p2 *InstancePtr);
void XExecutefirstlayer1_p2_Set_Layer1_Neurons_GPU(XExecutefirstlayer1_p2 *InstancePtr, u32 Data);
u32 XExecutefirstlayer1_p2_Get_Layer1_Neurons_GPU(XExecutefirstlayer1_p2 *InstancePtr);
void XExecutefirstlayer1_p2_Set_Layer1_Weights_GPU(XExecutefirstlayer1_p2 *InstancePtr, u32 Data);
u32 XExecutefirstlayer1_p2_Get_Layer1_Weights_GPU(XExecutefirstlayer1_p2 *InstancePtr);
void XExecutefirstlayer1_p2_Set_Layer2_Neurons_GPU(XExecutefirstlayer1_p2 *InstancePtr, u32 Data);
u32 XExecutefirstlayer1_p2_Get_Layer2_Neurons_GPU(XExecutefirstlayer1_p2 *InstancePtr);

void XExecutefirstlayer1_p2_InterruptGlobalEnable(XExecutefirstlayer1_p2 *InstancePtr);
void XExecutefirstlayer1_p2_InterruptGlobalDisable(XExecutefirstlayer1_p2 *InstancePtr);
void XExecutefirstlayer1_p2_InterruptEnable(XExecutefirstlayer1_p2 *InstancePtr, u32 Mask);
void XExecutefirstlayer1_p2_InterruptDisable(XExecutefirstlayer1_p2 *InstancePtr, u32 Mask);
void XExecutefirstlayer1_p2_InterruptClear(XExecutefirstlayer1_p2 *InstancePtr, u32 Mask);
u32 XExecutefirstlayer1_p2_InterruptGetEnabled(XExecutefirstlayer1_p2 *InstancePtr);
u32 XExecutefirstlayer1_p2_InterruptGetStatus(XExecutefirstlayer1_p2 *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
